#!/usr/bin/env python3
"""
Script de instala√ß√£o autom√°tica para Academic Assistant Stealth
"""

import os
import sys
import subprocess
import platform
import urllib.request
import zipfile
import shutil
from pathlib import Path

def print_header():
    """Imprime cabe√ßalho do instalador"""
    print("=" * 60)
    print("üéØ ACADEMIC ASSISTANT STEALTH - INSTALADOR")
    print("=" * 60)
    print("Sistema stealth para assist√™ncia acad√™mica com LLM")
    print("‚ö†Ô∏è  APENAS PARA USO EDUCACIONAL")
    print("=" * 60)

def check_system():
    """Verifica se o sistema √© compat√≠vel"""
    print("\nüîç Verificando sistema...")
    
    system = platform.system()
    if system != "Windows":
        print(f"‚ùå Sistema {system} n√£o suportado. Apenas Windows √© suportado.")
        return False
    
    print(f"‚úÖ Sistema compat√≠vel: {system} {platform.release()}")
    
    # Verifica Python
    python_version = sys.version_info
    if python_version.major < 3 or (python_version.major == 3 and python_version.minor < 8):
        print(f"‚ùå Python {python_version.major}.{python_version.minor} muito antigo. Requer Python 3.8+")
        return False
    
    print(f"‚úÖ Python {python_version.major}.{python_version.minor}.{python_version.micro}")
    return True

def install_dependencies():
    """Instala depend√™ncias Python"""
    print("\nüì¶ Instalando depend√™ncias...")
    
    try:
        # Atualiza pip
        subprocess.run([sys.executable, "-m", "pip", "install", "--upgrade", "pip"], 
                      check=True, capture_output=True)
        
        # Instala depend√™ncias
        subprocess.run([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"], 
                      check=True, capture_output=True)
        
        print("‚úÖ Depend√™ncias instaladas com sucesso")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao instalar depend√™ncias: {e}")
        return False

def install_tesseract():
    """Instala Tesseract OCR para Windows"""
    print("\nüî§ Configurando Tesseract OCR...")
    
    tesseract_path = "C:\\Program Files\\Tesseract-OCR\\tesseract.exe"
    
    if os.path.exists(tesseract_path):
        print("‚úÖ Tesseract j√° instalado")
        return True
    
    print("üì• Tesseract n√£o encontrado. Instala√ß√£o manual necess√°ria:")
    print("1. Baixe de: https://github.com/UB-Mannheim/tesseract/wiki")
    print("2. Instale em: C:\\Program Files\\Tesseract-OCR\\")
    print("3. Execute novamente este instalador")
    
    return False

def setup_environment():
    """Configura ambiente e arquivos necess√°rios"""
    print("\n‚öôÔ∏è Configurando ambiente...")
    
    try:
        # Cria diret√≥rios necess√°rios
        dirs = ["temp", "logs", "data"]
        for dir_name in dirs:
            os.makedirs(dir_name, exist_ok=True)
            print(f"üìÅ Diret√≥rio criado: {dir_name}")
        
        # Verifica arquivo de configura√ß√£o
        if not os.path.exists("config.py"):
            print("‚ùå Arquivo config.py n√£o encontrado")
            return False
        
        print("‚úÖ Ambiente configurado")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na configura√ß√£o: {e}")
        return False

def create_startup_script():
    """Cria script de inicializa√ß√£o"""
    print("\nüöÄ Criando script de inicializa√ß√£o...")
    
    startup_script = """@echo off
cd /d "%~dp0"
python main.py
pause
"""
    
    try:
        with open("start_assistant.bat", "w") as f:
            f.write(startup_script)
        
        print("‚úÖ Script de inicializa√ß√£o criado: start_assistant.bat")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao criar script: {e}")
        return False

def test_installation():
    """Testa a instala√ß√£o"""
    print("\nüß™ Testando instala√ß√£o...")
    
    try:
        # Testa imports
        import PyQt5
        import PIL
        import mss
        import pynput
        print("‚úÖ Imports b√°sicos funcionando")
        
        # Testa componentes principais
        from config import config
        print("‚úÖ Configura√ß√£o carregada")
        
        from utils.screenshot_manager import ScreenshotManager
        from utils.hotkey_manager import HotkeyManager
        from utils.api_client import OpenRouterClient
        print("‚úÖ Componentes principais importados")
        
        print("‚úÖ Instala√ß√£o testada com sucesso!")
        return True
        
    except ImportError as e:
        print(f"‚ùå Erro de importa√ß√£o: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return False

def show_usage_instructions():
    """Mostra instru√ß√µes de uso"""
    print("\n" + "=" * 60)
    print("üéØ INSTALA√á√ÉO CONCLU√çDA!")
    print("=" * 60)
    print("\nüìã COMO USAR:")
    print("1. Execute: python main.py")
    print("   ou clique em: start_assistant.bat")
    print("\n‚å®Ô∏è HOTKEYS:")
    print("‚Ä¢ CTRL+Y - Capturar tela")
    print("‚Ä¢ CTRL+B - Toggle visibilidade")
    print("‚Ä¢ CTRL+Enter - Processar com LLM")
    print("\nüîê MODO STEALTH:")
    print("‚Ä¢ Invis√≠vel em grava√ß√µes de tela")
    print("‚Ä¢ N√£o aparece em Alt+Tab")
    print("‚Ä¢ √çcone minimizado no system tray")
    print("\n‚ö†Ô∏è IMPORTANTE:")
    print("‚Ä¢ Configure sua OPENROUTER_API_KEY no config.py")
    print("‚Ä¢ Use apenas para fins educacionais")
    print("‚Ä¢ Respeite os termos de uso das plataformas")
    print("\n" + "=" * 60)

def main():
    """Fun√ß√£o principal do instalador"""
    
    print_header()
    
    # Verifica√ß√µes do sistema
    if not check_system():
        input("\nPressione Enter para sair...")
        return 1
    
    # Instala√ß√£o de depend√™ncias
    if not install_dependencies():
        input("\nPressione Enter para sair...")
        return 1
    
    # Configura√ß√£o do Tesseract
    if not install_tesseract():
        print("\n‚ö†Ô∏è Continue a instala√ß√£o ap√≥s configurar o Tesseract")
    
    # Setup do ambiente
    if not setup_environment():
        input("\nPressione Enter para sair...")
        return 1
    
    # Cria√ß√£o de scripts
    if not create_startup_script():
        print("‚ö†Ô∏è Script de inicializa√ß√£o n√£o criado (opcional)")
    
    # Teste da instala√ß√£o
    if not test_installation():
        print("‚ö†Ô∏è Alguns componentes podem n√£o funcionar corretamente")
    
    # Instru√ß√µes finais
    show_usage_instructions()
    
    input("\nPressione Enter para finalizar...")
    return 0

if __name__ == "__main__":
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n\nüõë Instala√ß√£o cancelada pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro durante a instala√ß√£o: {e}")
        sys.exit(1) 